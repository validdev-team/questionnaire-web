QUESTIONS
[
  {
    "id": "question1",
    "question": "Question 1",
    "choices": [
      {
        "text": "Option 1"
      },
      {
        "text": "Option 2"
      },
      {
        "text": "Option 3"
      },
      {
        "text": "Option 4"
      },
      {
        "text": "Option 5"
      },
      {
        "text": "Option 6"
      },
      {
        "text": "Option 7"
      },
      {
        "text": "Option 8"
      },
      {
        "text": "Option 9"
      }
    ],
    "sortOrder": 1
  },
  {
    "id": "question2",
    "question": "Question 2",
    "choices": [
      {
        "text": "Choice 1"
      },
      {
        "text": "Choice 2"
      },
      {
        "text": "Choice 3"
      },
      {
        "text": "Choice 4"
      },
      {
        "text": "Choice 5"
      }
    ],
    "sortOrder": 2
  }
]


RESPONSES
[
  {
    "id": "eYGNep6k3StqrepN29Cr",
    "answers": {
      "question1": [3, 1],
      "question2": [4]
    }
  },
  ...
]


RESULT
{
  "totalResponses": 100,
  "question1": {
    "choice1": 10,
    "choice2": 20,
    "choice3": 30,
    "choice4": 40,
    "choice5": 50,
    "choice6": 60,
    "choice7": 70,
    "choice8": 80,
    "choice9": 90
  },
  "question2": {
    "choice1": 10,
    "choice2": 20,
    "choice3": 30,
    "choice4": 40,
    "choice5": 50
  }
}


POSSIBLE SOLUTIONS:

1. each choice each collection
what to change: submission api and get result api
++ currently possibly the fastest one (no delay)
- a lot more writes and reads
  *might exceed free plan if test a lot of times or on D-day a lot of rounds of voting, so either change to paid or can only test 1000 users once per day
  assuming for 1 test in 1 day:
  1000 users x 15 collections to write on each submission = 15k writes (max 20k/day)
  1000 users x 15 collections to read on each submission = 15k reads (max 50k/day)
- not manageable / front end only for result fetch
  *since this has to be in front end if u add delay logic u have to add on front end too, fe will be very long

2. each choice each document
(exactly same as number 1 but the diff is its structure, only creates 2 collection: question 1 and 2, and question 1 has 9 documents for 9 choices, question 2 has 5 documents for 5 choices)

3. another api to read responses collection and count vote count through responses (NO CANNOT USE THIS SORRY)
what to change: get result api and add count result api
+ less writes and reads
  assuming for 1 test in 1 day:
  1000 users x 2 collections (responses and result collection) to write on each submission = 2k writes
  10 users x 100 seconds x 1 collection (result collection) to read on each submission = 10 + 20 + 30 + ... + 1000 reads 1/2 * 100 (10 + 1000) OH NO WRONG CALCULATED JUST NOW
+ manageable / separate to be (can set delay for how many seconds, and can be editted on api file not front end)
- delay (at least 1 update/second)

4. hybrid (read each document size and count vote and update to result collection)
what to change: submission api, get result api, add count result api
+ manageable / separate to be
  *can easily modify it to have delay or no delay based on the test performance
+ less reads (if delayed per second)
  1000 seconds (if 1 user 1 second) x 1 collection (result collection) to read on each submission = 1k reads
- code is more complicated
- more writes (similar to option 1)
  1000 users x 16 collections to write on each submission = 16k writes (max 20k/day)
